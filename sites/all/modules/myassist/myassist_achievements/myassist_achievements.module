<?php

/**
 * Define an achievement.
 *
 * This hook describes your achievements to the base module so that it can
 * create the pages and caches necessary for site-wide display. The base
 * module doesn't know how to unlock any of your achievements... instead, you
 * use Drupal's existing hooks, the achievement storage tables, and a few
 * helper functions to complete the workflow. See the remaining documentation
 * in this file for further code samples.
 *
 * There are many different kinds of achievements, and it's accurate enough to
 * say that if you can measure or respond to an action, it can be made into a
 * matching achievement. Be creative. Look at what others are doing. Have fun.
 * Your gamification efforts will fail or be un-fun if you don't have a gamer
 * helping you, if you make everything a mindless grind, or if you simply
 * copy achievements from another site or install.
 *
 * @return
 *   An array whose keys are internal achievement IDs (32 chars max) and whose
 *   values identify properties of the achievement. These properties are:
 *   - title: (required) The title of the achievement.
 *   - description: (required) A description of the achievement.
 *   - points: (required) How many points the user will earn when unlocked.
 *   - images: (optional) An array of (optional) keys 'locked', 'unlocked',
 *     and 'secret' whose values are image file paths. Achievements exist in
 *     three separate display states: unlocked (the user has it), locked (the
 *     user doesn't have it), and secret (the user doesn't have it, and the
 *     achievement is a secret). Each state can have its own default image
 *     associated with it (which administrators can configure), or achievements
 *     can specify their own images for one, some, or all states.
 *   - storage: (optional) If you store statistics for your achievement, the
 *     core module assumes you've used the achievement ID for the storage
 *     location. If you haven't, specify the storage location here. This lets
 *     the core module know what to delete when an administrator manually
 *     removes an achievement unlock from a user. If your achievement
 *     tracks statistics that are NOT set with achievements_storage_get()
 *     or _set, you don't have to define the 'storage' key.
 *   - secret: (optional) The achievement displays on a user's Achievements
 *     tab but does not reveal its title, description, or points until the
 *     user has unlocked it. Compatible with 'invisible'.
 *   - invisible: (optional) The achievement does NOT display on a user's
 *     Achievements tab, but does show up on the leaderboards when necessary.
 *     Compatible with 'secret' (i.e., if another user has unlocked an
 *     invisible achievement, a user who has not unlocked it will see the
 *     placeholder secret text instead of the actual achievement itself).
 *
 *   Achievements can also be categorized into groups. Groups are simply
 *   arrays whose keys are internal group IDs and whose values identify
 *   the 'title' of the group as well as the array of 'achievements' that
 *   correspond to that group. If some achievements are within a group and
 *   some achievements are without a group, the groupless achievements will
 *   automatically be placed into a "Miscellany" category.
 */
function myassist_achievements_achievements_info() {
  $achievements = array(
    'question-creation' => array(
      'title' => t('Question creation'),
      'achievements' => array(
        'question-count-1' => array(
          'title'       => t('Posted a question'),
          'description' => t("We no longer think you're a spam bot. Maybe."),
          'storage'     => 'question-count',
          'points'      => 50,
        ),
        'question-count-3' => array(
          'title'       => t('Posted 3 questions'),
          'description' => t('But what about the children?!'),
          'storage'     => 'question-count',
          'points'      => 100,
//      'images' => array(
//        'unlocked'  => 'sites/default/files/example1.png',
//         'secret' and 'locked' will use the defaults.
//      ),
        ),

        'level-10' => array(
            'title'       => t('Reached level 10'),
            'description' => t("You're officially no longer a fucking n00b"),
            'storage'     => 'level',
            'points'      => 10,
        ),
        'level-15' => array(
            'title'       => t('Reached level 15'),
            'description' => t("You're getting the hang of this"),
            'storage'     => 'level',
            'points'      => 20,
        ),
        'level-20' => array(
            'title'       => t('Reached level 20'),
            'description' => t("We welcome you into our circle of buddies"),
            'storage'     => 'level',
            'points'      => 30,
        ),
        'level-80' => array(
            'title'       => t('Reached level 80'),
            'description' => t("Bow down to the almighty Ã¼ber-poster"),
            'storage'     => 'level',
            'points'      => 1000,
        ),
      )
    ),
  );

  return $achievements;
}



/**
 * Implements hook_node_insert().
 * Trigger achievements for question posting
 */
function myassist_achievements_node_insert($node) {
  if ($node->type === "answers_question") {
    $current_count = achievements_storage_get('question-count', $node->uid) + 1;
    achievements_storage_set('question-count', $current_count, $node->uid);

    if (in_array($current_count, array(1, 3))) {
      achievements_unlocked('question-count-' . $current_count, $node->uid);
    }
  }
}

/*
 * Implements hook_userpoints
 * Trigger achievements for leveling up
 * Called when the user's points are altered (by userpoints_invoke_all() in userpoints.module)
 * */
function myassist_achievements_userpoints($operation, $parameters) {
  if ($operation === "points after") {
    $uid = $parameters["uid"];
    // Get the number of points before & after the change
    $pointsAfter = userpoints_get_current_points($uid);
    $pointsBefore = $pointsAfter - $parameters["points"];

    myassist_achievements_copy_to_achievement_table($uid, $pointsAfter);

    // Get the number of points before & after the change
    if ($pointsBefore < $pointsAfter) {
      // Get the level before & after the change
      $levelBefore = myassist_achievements_get_user_level($uid)['level'];
      $levelAfter = myassist_achievements_get_level_by_points($pointsAfter)['level'];
      if ($levelBefore <= $levelAfter) {
        // See if we crossed a threshold so we get an achievement. A user can potentially jump several levels in one go, if he gets a lot of points at once
        foreach (array(10, 15, 20, 80) as $achievementLevel) {
          if (/*$levelBefore < $achievementLevel &&*/ $levelAfter >= $achievementLevel) {
            achievements_unlocked('level-' . $achievementLevel, $uid);
          }
        }
      }
    }
    myassist_achievements_register_points($uid, $parameters['txn_id']);
  }
}


/*
 * Look up level info by point count
 * */
function myassist_achievements_get_level_by_points($points) {
  $result = db_query("SELECT level,title,points FROM myassist_achievements_levels WHERE points <= :points ORDER BY level DESC LIMIT 1", array(":points" => $points));
  if ($result) {
    if ($row = $result->fetchAssoc()) {
      return $row;
    }
  }
}
/*
 * Look up level info by level number
 * */
function myassist_achievements_get_level($level) {
  $result = db_query("SELECT level,title,points FROM myassist_achievements_levels WHERE level = :level LIMIT 1", array(":level" => $level));
  if ($result) {
    if ($row = $result->fetchAssoc()) {
      return $row;
    }
  }
  return 0;
}

/*
 * Look up level info by user id
 * */
function myassist_achievements_get_user_level($uid) {
  $points = userpoints_get_current_points($uid);
  return myassist_achievements_get_level_by_points($points);
}
/*
 * Get the number of points needed to level up
 * */
function myassist_achievements_get_user_points_for_next_level($uid) {
  $currentPoints = userpoints_get_current_points($uid);
  $currentLevel = myassist_achievements_get_level_by_points($currentPoints);
  return myassist_achievements_get_level($currentLevel['level'] + 1)['points'] - $currentPoints;
}


/*
 * Implements hook_userpoints_list_transactions_alter
 * Adds a table to the user's 'points' screen
 * */
function myassist_achievements_userpoints_list_transactions_alter(&$data) {
  $uid = $data["#account"]->uid;
  $level = myassist_achievements_get_user_level($uid);
  $data['list']['level'] = array(
      '#theme' => 'table',
      '#header' => array(
          array(
            'data' => "Level",
            'colspan' => 2,
          ),
      ),
      '#rows' => array(
          array(
              'data' => array(t('Current level'), $level['level']),
              'class' => array('userpoints-myuserpoints-total-approved'),
          ),
          array(
              'data' => array(t('Current title'), t($level['title'])),
              'class' => array('userpoints-myuserpoints-total-approved'),
          ),
          array(
            'data' => array(t('Points until level-up'), myassist_achievements_get_user_points_for_next_level($uid)),
            'class' => array('userpoints-myuserpoints-total-approved'),
          )
      ),
      '#weight' => 20,
      '#attributes' => array('class' => array('userpoints-myuserpoints-total')),
  );
}





/**
 * Implements hook_profile2_view().
 * Displays achievement badges on profile page
 */
function myassist_achievements_profile2_view($profile, $view_mode, $langcode) {
  $uid = $profile->uid;

  $points = userpoints_get_current_points($uid);
  $profile->content['points'] = array(
    '#theme' => "myassist_data", // Point to definition in myassist_achievements_theme
    '#weight' => 0,
    '#title' => t('Points'),
    '#class' => 'userpoints',
    '#text' => t("@points points", array("@points" => $points)), // Pass data to template (name must be defined in the definition)
    '#href' => "/user/$uid/points",
  );


  $level = myassist_achievements_get_user_level($uid);
  $profile->content['level'] = array(
    '#theme' => "myassist_data",
    '#weight' => 0,
    '#title' => t('Level'),
    '#class' => 'userlevel',
    '#text' => t("Level @level", array("@level" => $level["level"])),
    '#href' => "/user/$uid/achievements",
  );


  $profile->content['achievements'] = array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('achievements'))
  );

  // Get a list of all achievements
  $achievements_grouped = achievements_load(NULL, TRUE);
  // Get a definition of which achievements are unlocked by the user
  $unlocks = achievements_unlocked_already(NULL, $uid);

  // Find all achievement objects that the user has unlocked
  $unlocked_achievements = array();
  foreach ($achievements_grouped as $group_id => $group) {
    foreach ($group['achievements'] as $achievement_id => $achievement) {
      if (isset($unlocks[$achievement_id])) {
        $unlocked_achievements[] = array(
          'achievement' => $achievement,
          'unlock' => $unlocks[$achievement_id]
        );
      }
    }
  }

  // Sort the unlocked achievements by timestamp, newest first
  function cmp_achievements($a, $b) {
    $ta = $a['unlock']['timestamp'];
    $tb = $b['unlock']['timestamp'];
    return $ta === $tb ? 0 : $ta > $tb;
  }
  uksort($unlocked_achievements, "cmp_achievements");

  // Cut off all but the latest 10 achievements
  array_splice($unlocked_achievements, 10);

  // Add the achievements to the rendering array
  for ($i=0; $i<count($unlocked_achievements); $i++) {
    $unlock = $unlocked_achievements[$i]['unlock'];
    $achievement = $unlocked_achievements[$i]['achievement'];
    $achievement['title'] = t($achievement['title']);

    // Get extra rendering info from the achievements module, such as image and title
    $extra = array('achievement'=>$achievement, 'unlock'=>$unlock);
    achievements_template_shared_variables($extra);

    // Stuff an object into our rendering array
    $profile->content['achievements'][$achievement['id']] = array(
      '#theme' => 'myassist_achievement',
      '#weight' => $i,
      '#title' => t('Achievement'),
      '#achievement' => $achievement,
      '#image' => $extra['image'],
      '#achievement_title' => $extra['achievement_title'],
    );
  }

}

/**
 * Implements hook_theme().
 */
function myassist_achievements_theme($existing, $type, $theme, $path){
  return array(
    'myassist_achievement' => array(
      'template' => 'templates/myassist_achievement',
      'variables' => array('achievement' => NULL, 'image' => NULL, 'achievement_title' => NULL),
    ),

    'myassist_points_notification' => array(
      'template'        => 'myassist_points_notification',
      'variables'       => array('points' => NULL, 'image' => NULL, 'classes' => 'hey'),
    ),
    'myassist_points_notification_once' => array(
      'template'        => 'myassist_points_notification_once',
      'variables'       => array(),
    ),

  );
}


/**
 * Implements hook_preprocess_HOOK().
 * Make sure to translate achievement titles and descriptions for the UI
 */
function myassist_achievements_preprocess_achievement(&$variables) {
  if (isset($variables['achievement'])) {
    if (isset($variables['achievement']['title'])) {
      $original = $variables['achievement']['title'];
      $translated = t($original);
      if (isset($translated) && $translated !== $original) {
        $variables['image']['#item']['title'] =
        $variables['image']['#item']['alt'] =
        $variables['achievement']['title'] =
        $variables['achievement_title']['#title'] =
          t($variables['achievement']['title']);
      }
    }
    if (isset($variables['achievement']['description'])) {
      $original = $variables['achievement']['description'];
      $translated = t($original);
      if (isset($translated) && $translated !== $original) {
        $variables['achievement']['description'] = $translated;
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function myassist_achievements_block_info() {
  $blocks = array();
  $blocks['userpoints'] = array(
    'info' => t('Current user points'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function myassist_achievements_block_view($delta = '') {
  global $user;
  $block = array();
  $uid = $user->uid;

  switch ($delta) {
    case 'userpoints':
      if (user_access('view own userpoints')) {
        $block['content'] = array(
          '#theme' => "myassist_data",
          // Point to definition in myassist_achievements_theme
          '#weight' => 0,
          '#title' => t('Points'),
          '#class' => 'userpoints',
          '#text' => userpoints_get_current_points($uid),
          //'#text' => t("@points points", array("@points" => userpoints_get_current_points($uid))),
          // Pass data to template (name must be defined in the definition)
          '#href' => "/user/$uid/points",
        );
      }
  }

  return $block;
}

//------------------------------------------------------------------------------
// Show a notification each time we gain points

function myassist_achievements_register_points($uid, $txid) {
  db_insert('myassist_pending_point_display')->fields(array('uid'=>$uid, 'txid'=>$txid))->execute();
}

function myassist_achievements_page_alter(&$page) {
  global $user;
  $uid = $user->uid;
  $hasNotification = false;

  if ($_SERVER['REQUEST_METHOD'] === "GET") {
    $notifications = db_query('SELECT n.uid, n.txid FROM {myassist_pending_point_display} n WHERE n.uid = :uid', array(':uid' => $uid));
    if ($notifications->rowCount() > 0) {
      drupal_add_library('system', 'ui.dialog');
      drupal_add_library('system', 'effects.fade');
      drupal_add_js(drupal_get_path('module', 'achievements') . '/achievements.js');
      drupal_add_css(drupal_get_path('module', 'achievements') . '/achievements.css');

      foreach ($notifications as $notification) {
        $txid = $notification->txid;
        //$transaction = userpoints_transaction_load($txid);
        $transaction = db_query('SELECT * from {userpoints_txn} WHERE txn_id = :txn', array(':txn' => $txid))->fetchObject();
        if ($transaction) {
          $page['content']['points'][$txid] = array(
            '#theme' => 'myassist_points_notification',
            '#points' => $transaction->points,
          );
          $hasNotification = true;
        }
      }
      db_delete('myassist_pending_point_display')
        ->condition('uid', $uid)
        ->execute();
    }

    // See if there are any achievement notifications
    if (!$hasNotification) {
      if (isset($page['page_bottom']) && isset($page['page_bottom']['achievements'])) {
        foreach ($page['page_bottom']['achievements'] as $achievementPopup) {
          if ($achievementPopup['#theme'] === 'achievement_notification') {
            $hasNotification = true;
            break;
          }
        }
      }
    }

    if ($hasNotification) {
      $page['content']['points']['common'] = array(
        '#theme' => 'myassist_points_notification_once'
      );
    }


  }
}

/**
 * Implements hook_user_delete().
 */
function myassist_achievements_user_delete($account) {
  // The user is being deleted, delete all traces in our tables.
  db_delete('myassist_pending_point_display')->condition('uid', $account->uid)->execute();
}

//------------------------------------------------------------------------------
// Unify points system

function myassist_achievements_achievements_unlocked($achievement, $uid) {
  myassist_achievements_copy_to_userpoints_table($uid, $achievement['points'], 'achievement '.$achievement['id']);
}
function myassist_achievements_achievements_locked($achievement, $uid) {
  myassist_achievements_copy_to_userpoints_table($uid, -$achievement['points'], 'achievement '.$achievement['id']);
}


function myassist_achievements_copy_to_achievement_table($uid, $points) {
  db_merge('achievement_totals')
    ->key(array('uid' => $uid))
    ->fields(array('points' => $points))
    ->execute();
}
function myassist_achievements_copy_to_userpoints_table($uid, $addpoints, $reason=null) {
  $params = array(
    'uid' => $uid,
    'points' => $addpoints,
    'status' => USERPOINTS_TXN_STATUS_APPROVED,
    'operation' => $reason
  );
  _userpoints_transaction($params);
}